console.log("énigme sur l'analyse de sequence partie 1 avec pydéfis");
// console.log("input de l'énigme : NDNKCNVNUGYWRGCNABGSNCRACGSHWNNCYBCSNVUAAGDCMNKNYNNBNCGUBHUNRANDGDMDRSYMGSNWHNDNCVCMAMCANWKYRKVMWMKC");
let chaineNucleique = "NDNKCNVNUGYWRGCNABGSNCRACGSHWNNCYBCSNVUAAGDCMNKNYNNBNCGUBHUNRANDGDMDRSYMGSNWHNDNCVCMAMCANWKYRKVMWMKC";
// chaineNucleique = chaineNucleique.split("");
// console.log(chaineNucleique);
// let numberOfSeq = 1;
// for (let i = 0; i < chaineNucleique.length; i++) {
// 	if (chaineNucleique[i] == "R") {
// 		numberOfSeq = numberOfSeq * 2;
// 	} else if (chaineNucleique[i] == "Y") {
// 		numberOfSeq = numberOfSeq * 2;
// 	} else if (chaineNucleique[i] == "K") {
// 		numberOfSeq = numberOfSeq * 2;
// 	} else if (chaineNucleique[i] == "M") {
// 		numberOfSeq = numberOfSeq * 2;
// 	} else if (chaineNucleique[i] == "S") {
// 		numberOfSeq = numberOfSeq * 2;
// 	} else if (chaineNucleique[i] == "W") {
// 		numberOfSeq = numberOfSeq * 2;
// 	} else if (chaineNucleique[i] == "B") {
// 		numberOfSeq = numberOfSeq * 3;
// 	} else if (chaineNucleique[i] == "D") {
// 		numberOfSeq = numberOfSeq * 3;
// 	} else if (chaineNucleique[i] == "H") {
// 		numberOfSeq = numberOfSeq * 3;
// 	} else if (chaineNucleique[i] == "V") {
// 		numberOfSeq = numberOfSeq * 3;
// 	} else if (chaineNucleique[i] == "N") {
// 		numberOfSeq = numberOfSeq * 4;
// 	}
// }

// console.log(numberOfSeq % 100000);
console.log(nombreSequence(chaineNucleique));

console.log("énigme sur l'analyse de sequence partie 2 avec pydéfis");

let chaine2acide =
	"MNGHNNNNNKRRBNN CUGCGUCAAUAAUUA AUGUACGAGGAGCCU AUCUAAUGAGGGUCC AAGAGAUGUGAACUG AAGUCUUACGAACGG AAGCAGCGGUAGUAA CAGAGCCUCAAGGGA ACGCACCCUUGGCCC CUGCGCUCAUGGUGC ACGAAAAUAUGGUGU AUGUCGCACGAAUAC AAGUCAAUAUGACUC CCGCUGGCUUGGGUG CUGUAAUAAUAAGCU CCGAUGGUGUGGCCU CAGUGACCAUAGUGU CGGCUCGAGUAGUAC CAGUCCCAAGGGGGA CAGUCACGGUAGGUU AGGUAUCACGGAGUC ACGCAAUGCUAGUUA CAGUCCGUGGGACAG AAGUUAUUAGGAUGU CCGUGCUAGUGGUGU AGGUUCCAUAGGUGC AGGAAUGCAUAAGUA AUGCAUCUCGGACUC CGGAUUGAUUGAGGA CAGCCUGGUUGAGUU ACGCCCGCCUGAUAA AGGACGCCAUAGGCA CCGUAAGGCUGGCAC ACGCAGGGUGGGCGA CGGAAAGCGGGUGUU AUGCAUUGAGUAGCC CAGCCCUGAUGAGGU AAGAAGCCCUCGGGC CGGCGGUUCGGAGUC CGGCGUCGAGGAGGU AGGAAUGCCUAAUUC CCGAGGUACGGGCUU CAGAGUGCGUGGCGU AGGACUUAUUAAGAG CGGCAUAGAUGGGGA ACGCUCCACUAGUAC CCGAGGAACUGAUCU AGGAAAAAGUGGUCC AGGUGUUUUUGGGUG AAGUACGGAGAAGGC CCGCAUCGAUAGUGA AAGCAGAUGUAGUUU AGGCCAAGUAAACCC CUGAAGAAAUGAGCG AGGUAACUCGAGUCA CGGCAACCGGAGCGC CAGAAACUUCGGCGG CCGCAACUAGAAGAC AGGUUCGACGGGGGA CAGUUUUUAGAAUCC AGGACAACGUAGCGC ACGAAAAUCUGACUA AUGCGUUAAUGACAC AUGAAGGCCGAAUAU CCGUGCGUAGGGCUG CGGCUUUAAUAGGCG AUGACUGAAGAACGU ACGUGACUUGAGUCA CAGAGAUCUUGACGA CGGCACCCAGGAUAC ACGAACCCCUGAUAU AUGACACUGGGGUUA AAGUGUAAUGGAGCG AGGCAUCACGAAGAA ACGUAGGGAGGGCCC AAGUAGUUUUAAGUC ACGUCUUGAGAAGCC CGGACAAGGGAAGGA AAGACCGUAUAGCCA AAGCGGCCUGAGUAA CCGAACUCUUAGGUG ACGAUCAUGGGGUCU ACGACCUCGUAACCG AAGACCUCGGGGGUG CGGCCUAGGGAAGAA AGGUUGGUGGGAACC AAGUACACUUGAUAA CAGUUUUGCGGGUAC AUGUGGCGGGGAUGA AAGAAUACUUGACAC CCGCCCCAAGAGUAA CCGCUUGUUGGGCUG ACGAAGCCGUAACAC AUGAUGAAAGGACUA CUGUUUAUGGGACAU CGGAGAACAGGGGAG AAGCGGUGCUAAUGU AUGUGCCGCUGAGCA AUGACCUCUUAGUAU CUGUACAACUGAUCA CUGCUAGGAGAAGGG AAGCGUCGAGGACUA UCGCAGGGUGAGUUG ACGCGAGCGUGACUC CCGUUGAUAUAGGUA AAGAAAAGGGGGGGC CAGCUGUUGGAGGCG CGGUGAAUAGAAUUC CAGCGAGCAGAGUCC AAGCCUUUGGAGGAC CCGUUGCCUUGAUUA AGGAGGUAAUGGUCC AAGCUGACGUAGCGU CGGAUCCCAUGGCAC AGGAGUCCAGGAGUG AUGUAGGGGUAGCAG CCGCCCGAGGAGUCC ACGAAGAGAUGAGGC ACGCAUGCUGGAUUC ACGUCACGCUGGCCC CCGCCUUGGUGAUUG CGGUAGAAGGUAGUU CAGUCCUUAGAGGGA CCGUUCGGAGAAUGC AAGAAUCCUUGGUAU AGGCACUAAGAGUUU AAGUUUUAUUAGGAC ACGAAUAUAGAAUUC CUGUCGCUUUGAGAU CGGCUUCAAUGAUCU CAGACAUUCGAGUAA AUGAUAGGCUGAUCU AAGCAUUCUUGGCCA AUGCUCGCGGGGGAU AGGCGGCGUGGAGAC AAGCCUAGAUGACGA ACGCUAAGCUAGGGC CGGACACUGUAGGGU CGGUCGUGUUGGGAA AGGAACAUUGGGUAU AAGUAAUAGGGACGU CGGCCGCGAGGACUG CAGUCGUGCUAGUAC AGGCAUCAUGGGGCA CUGCCUCAAUGGCUA CUGUUUUAUUGACCA AGGUCUGCGGAGCAC ACGCGACCUUGACCA AGGCACCAGGGAUUU GAGUGGUCAUAAGCC AAGCGGGACUAGUUG AAGUUAUCGGGAGUA AGGAUUAAGUAAUCC CCGCACCGUGAAGGA CUGCCAUUUGGAGGC AGGCCUACCGGGCUA AUGACGACUGAAUCG CUGCCUAGUUGACCA AUGCACUAUGGGCGG CGGUUUCAAUAGCAA AAGCUGUCUUAAGGC AGGCAUAUUUAAUUA AGGCUGCGGGAACAG CCGCUGCGCGAGUUC CUGCAGUACGAAUGA CUGAGCUUGUAAGAG ACGAUCGUGUAGCGA ACGACUCAGGAGGAA ACGAACGCUGAGCCU CAGACCGUGGGGUUG AGGAGCGAUUAGCGU AAGAUAAAGGAGUUC CCGAGGACGGAAUUU AGGACGUAAUGGGUU AUGUCGGAUGAACGA AUGCACUUGUAACGC ACGUAACGUGGGCAC AGGCUCGUGGGACCG CGGAGACUAGAGUAC AGGUACUCGUAGUCC CGGUGAGUAGGGGGU CUGAUUUCGUGACUA AAGACCUGCUAAUCA CGGUGAAUCUAGCGU AUGUACAGUUGACGC AUGGUCGCGUAACGU CCGAGCUACAGUCGU CAGACCGCUGAAUUC CUGCGUGGGUGACUG AAGCUACUAGGAUCC CUGAACAUUGAGCCU CGGUCGCGAGGGGUA CUGACGUCGUAGGUU ACGCUGUAGUAGUAG CAGAAUUAAGGAGGU CGGCCACCGUGAUCU AAGCCGCCUUGGCCC AGGACAGGGGAGCCG CUGACCAGUUAAGAG CCGAGAACCGGAUCG ACGCCUUUAUCGCCU ACGAAUGAUGGGCCU AAGAAUAACUAGCGC CGGCGUAUAGAGGCC CGGUCCAACGAGGAA AAGCUAAUUGGGUGU CCGAUCGUCUGCUUC CGGAUCAAGUAGGCU AGGCGUGUAUGACUG CUGAUGGCAUAGGUU AGGCGAUCAGGAUUG CUGAUUGCAGAAGUC AUGCCUGGUUGAGUG ACGAUAUCGUGCCCC CUGCCAGAUUGACCG AGGCCGCGUUAGGCG CGGCUCUCCCAAUGU CUGCACCCGGAAUAA ACGCCCUAGUAAUUG CCGAGGCUAUGAGAU AUGCUCAGCGAGCCC CGGUUGACCGGACGC ACGAGGCGCUAGUUC ACGCAGCACGGGGGG AUGACAGCUGGGUAC AUGUCAAAAUGAUUG AUGAACCAGUAAGGU CAGGGCACAUAAGCG CCGUUCGCGUAAUGC CGGUCCCCUGAAGGA CGGUACCCAGGAGAA CGGCUCUCAGGGCGG AGGAAGAACUAGUGU AAGAUGAUGGAGGGU AUGUGCAAAGGACGG CUGCGCACGUGAUAC AGGUUUGCUGGAGAC AGGUUACGGUAAGAC CCGUUUAUAUAGCCA AGGAUAACUCGGCGC CAGAGACUCGAACGG ACGUGAGGUUGACGA CAGAUUUAAUGAUUA AGGACGCCCGAAGAU UAGCCAUAAUAACCA AUGCAGGGUUGACCU CGGACAGAUGGACUU AUGCACCUGGAGGUG AAGCUUGGAGAAGCA ACGAUAUUAUAAGUU ACGUACAAUUAAGCA AUGAUGACAUAAGGC CCGACUGGCUAACCG CUGACAGUUUGAUCG CCGCCGCUCGAAUUU AGGUUUGCAGGACAU CAGAUCUCGGGGUCA";

function nombreSequence(string) {
	string = string.split("");
	let numberOfSeq = 1;
	for (let i = 0; i < string.length; i++) {
		if (string[i] == "R") {
			numberOfSeq = numberOfSeq * 2;
		} else if (string[i] == "Y") {
			numberOfSeq = numberOfSeq * 2;
		} else if (string[i] == "K") {
			numberOfSeq = numberOfSeq * 2;
		} else if (string[i] == "M") {
			numberOfSeq = numberOfSeq * 2;
		} else if (string[i] == "S") {
			numberOfSeq = numberOfSeq * 2;
		} else if (string[i] == "W") {
			numberOfSeq = numberOfSeq * 2;
		} else if (string[i] == "B") {
			numberOfSeq = numberOfSeq * 3;
		} else if (string[i] == "D") {
			numberOfSeq = numberOfSeq * 3;
		} else if (string[i] == "H") {
			numberOfSeq = numberOfSeq * 3;
		} else if (string[i] == "V") {
			numberOfSeq = numberOfSeq * 3;
		} else if (string[i] == "N") {
			numberOfSeq = numberOfSeq * 4;
		}
	}
	return numberOfSeq % 100000;
}

// il faut d'abord determiner toute les sequence de motif possible et les comparer avec tout les autre entré

function patternArn(string) {
	string = string.replaceAll(" ", "");
	string = string.match(/.{1,6}/g);
	let count = 0;
	for (let i = 0; i < string.length; i++) {
		if (nombreSequence(string[i]) == 1) {
			count++;
		}
		console.log(string[i]);
		console.log(nombreSequence(string[i]));
	}
	return count;
}

console.log(patternArn("NGKWAR AGAAAA  GAUCAA  AGUAAG  UGGUAG  UGUUAG  GGUAAA  AGGUAG  CGGAAG  GGGAAG"));
